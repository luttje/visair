import type { AssistantConfig } from "../AssistantConfig";
import promptProjectLead from './prompts/projectLead.md?raw';

export const createPersonaFunctionName = 'createPersona';
export const sendInstructionsFunctionName = 'sendInstructions';
export const storeTaskInfoName = 'storeInputTaskInfo';
export const retrieveTaskInfoName = 'retrieveInputTaskInfo';

export const projectLeadAssistant: Omit<AssistantConfig, 'id'> = {
  name: 'Project Lead AI',
  description: 'Helps you by assembling a team and working on a project together.',
  avatar: 'ðŸ¤“',
  instructions: promptProjectLead
    .replaceAll('FUNC_CREATE_PERSONA', createPersonaFunctionName)
    .replaceAll('FUNC_SEND_INSTRUCTIONS', sendInstructionsFunctionName)
    .replaceAll('FUNC_STORE_TASK_INFO', storeTaskInfoName)
    .replaceAll('FUNC_RETRIEVE_TASK_INFO', retrieveTaskInfoName),
  tools: [
    /**
     * This function creates a persona with the given name and expertise.
     * The output will be returned to the assistant.
     */
    {
      type: 'function',
      function: {
        name: createPersonaFunctionName,
        description: 'Generates a persona with the given name and expertise.',
        parameters: {
          type: 'object',
          properties: {
            personaId: {
              type: 'string',
              description: 'The ID of the persona to track them, their expertise is contained in this ID.',
            },
            name: {
              type: 'string',
              description: 'A fun and memorable name for the persona.',
            },
            emoji: {
              type: 'string',
              description: 'An fun and fitting emoji to represent the persona.',
            },
            expertise: {
              type: 'string',
              description: 'The area of expertise of the persona. Instructions should be tailored to this expertise.',
            },
            instructions: {
              type: 'string',
              description: 'Clear instructions for the persona to follow with their expertise.',
            },
            relevantNewData: {
              type: 'string',
              description: 'All data this persona needs to know to complete their task, like data from previous personas.',
            },
          },
          required: ['personaId', 'name', 'emoji', 'expertise', 'instructions', 'relevantNewData'],
          additionalProperties: false,
        },
        strict: true,
      },
    },
    /**
     * This function sends instructions to a persona.
     * The output will be returned to the assistant.
     */
    {
      type: 'function',
      function: {
        name: sendInstructionsFunctionName,
        description: 'Sends instructions to a persona.',
        parameters: {
          type: 'object',
          properties: {
            personaId: {
              type: 'string',
              description: 'The ID of the persona to send instructions to.',
            },
            instructions: {
              type: 'string',
              description: 'Follow-up instructions for the persona to improve their work.',
            },
            relevantNewData: {
              type: 'string',
              description: 'All data this persona needs to know to complete their task, like data from previous personas.',
            }
          },
          required: ['personaId', 'instructions', 'relevantNewData'],
          additionalProperties: false,
        },
        strict: true,
      },
    },
    /**
     * This function can be used by the assistant to store information important
     * to complete the input task. Like information generated by personas.
     */
    {
      type: 'function',
      function: {
        name: storeTaskInfoName,
        description: 'Stores information important to complete the input task with a persona.',
        parameters: {
          type: 'object',
          properties: {
            personaId: {
              type: 'string',
              description: 'The ID of the persona that generated the information.',
            },
            description: {
              type: 'string',
              description: 'Description of the information relevant to the input task or following step.',
            },
            relevantNewData: {
              type: 'string',
              description: 'Information relevant to the input task or following step to be stored.',
            },
          },
          required: ['personaId', 'description', 'relevantNewData'],
          additionalProperties: false,
        },
        strict: true,
      },
    },
    /**
     * This function can be used by the assistant to retrieve information important
     * to complete the input task. Like information generated by personas.
     */
    {
      type: 'function',
      function: {
        name: retrieveTaskInfoName,
        description: 'Retrieves information from a persona that is needed to complete the input task.',
        parameters: {
          type: 'object',
          properties: {
            personaId: {
              type: 'string',
              description: 'The ID of the persona where the information is stored.',
            },
          },
          required: ['personaId'],
          additionalProperties: false,
        },
        strict: true,
      },
    },
  ],
};
